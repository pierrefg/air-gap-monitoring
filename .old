# %%
e_am, e_me, e_av = np.array(df_synced['e_am']), np.array(df_synced['e_me']), np.array(df_synced['e_av'])
a_am, a_me, a_av = np.array(df_synced['a_am']), np.array(df_synced['a_me']), np.array(df_synced['a_av'])
Xam, Yam = e_am*np.cos(a_am), e_am*np.sin(a_am)
Xme, Yme = e_me*np.cos(a_me), e_me*np.sin(a_me)
Xav, Yav = e_av*np.cos(a_av), e_av*np.sin(a_av)

X,Y,Z,C=[],[],[],[]
depths = [1,2,3]
for i in list(range(len(Xam)))+[0]:
    X.append([1,2,3])
    Y.append([Xam[i],Xme[i],Xav[i]])
    Z.append([Yam[i],Yme[i],Yav[i]])
    C.append([e_am[i],e_me[i],e_av[i]])
fig, ax = plt.subplots(subplot_kw={'projection': '3d'})
scamap = plt.cm.ScalarMappable(cmap='inferno')
scamap.set_clim(5,8)
fcolors = scamap.to_rgba(np.array(C))
ax.plot_wireframe(
    np.array(X),
    np.array(Y),
    np.array(Z),
    # facecolors=fcolors,
    # rstride=5, cstride=5,
    # color=(0,0,0,0.3),
    color='black',
    linewidth=1,
    antialiased=True,
    zorder=100
)
# C = np.linspace(1, 5, np.array(Z).size).reshape(np.array(Z).shape)

ax.plot_surface(
    np.array(X),
    np.array(Y),
    np.array(Z),
    # facecolors=fcolors,
    # rstride=20, cstride=5,
    # cstride=10,
    color=(0,0,0,0.3),
    # color='black',
    # linewidth=30,
    antialiased=True,
    shade=False
)
ax.set_xticks([1,2,3])
ax.set_xticks([1,2,3])
ax.set_xticklabels(['upstream', 'median', 'downstream'])
ax.set_xlabel('sensor position', fontsize=10, rotation = 0)
ax.set_ylabel('y', fontsize=10, rotation = 0)
ax.set_zlabel('z', fontsize=10, rotation = 0)
